// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE = '/api/admin';
const PROJECTS_API = '/api/projects';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let projects = [];
let leads = [];
let editingProject = null;
let presentationsManager = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
window.initializeAdmin = function() {
    console.log('üöÄ Initializing admin panel...');
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setupAdmin();
        });
    } else {
        setupAdmin();
    }
};

function setupAdmin() {
    console.log('üîß Setting up admin panel...');
    
    try {
        setupAdminEventListeners();
        loadInitialData();
        showSection('projects');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—Ü–∏—è
        if (document.getElementById('presentationsSection')) {
            presentationsManager = new PresentationsManager();
        }
        
        console.log('‚úÖ Admin panel initialized successfully');
    } catch (error) {
        console.error('‚ùå Admin panel initialization failed:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupAdminEventListeners() {
    console.log('üéØ Setting up admin event listeners...');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navButtons = document.querySelectorAll('.nav-btn');
    if (navButtons.length === 0) {
        console.warn('‚ö†Ô∏è Nav buttons not found');
        return;
    }
    
    navButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
            const section = e.target.dataset.section;
            console.log(`üìÅ Switching to section: ${section}`);
            showSection(section);
        });
    });
    
    // –§–æ—Ä–º–∞ –ø—Ä–æ–µ–∫—Ç–∞
    const projectForm = document.getElementById('projectForm');
    if (projectForm) {
        projectForm.addEventListener('submit', handleProjectSubmit);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞
    setupProjectModal();
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const addProjectBtn = document.getElementById('addProjectBtn');
    if (addProjectBtn) {
        addProjectBtn.addEventListener('click', () => openProjectModal());
    }
}

function setupProjectModal() {
    const projectModal = document.getElementById('projectModal');
    if (!projectModal) return;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    projectModal.addEventListener('click', (e) => {
        if (e.target === projectModal) {
            closeProjectModal();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    const closeBtn = projectModal.querySelector('.close-btn');
    if (closeBtn) {
        closeBtn.addEventListener('click', closeProjectModal);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !projectModal.classList.contains('hidden')) {
            closeProjectModal();
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadInitialData() {
    console.log('üì• Loading initial data...');
    loadProjects();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
function showSection(sectionName) {
    console.log(`üëÅÔ∏è Showing section: ${sectionName}`);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    const activeNavBtn = document.querySelector(`[data-section="${sectionName}"]`);
    if (activeNavBtn) {
        activeNavBtn.classList.add('active');
    }
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.admin-section').forEach(section => {
        section.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.getElementById(`${sectionName}Section`);
    if (targetSection) {
        targetSection.classList.remove('hidden');
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    switch(sectionName) {
        case 'projects':
            if (projects.length === 0) loadProjects();
            break;
        case 'leads':
            if (leads.length === 0) loadLeads();
            break;
        case 'stats':
            loadStats();
            break;
        case 'presentations':
            if (presentationsManager) presentationsManager.loadPresentations();
            break;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
function getAuthHeaders() {
    const token = localStorage.getItem('admin_token');
    if (token) {
        return {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        };
    }
    
    if (window.auth && window.auth.getAuthHeaders) {
        return window.auth.getAuthHeaders();
    }
    
    console.warn('‚ö†Ô∏è No auth token available');
    return { 'Content-Type': 'application/json' };
}

// ===== –ü–†–û–ï–ö–¢–´ =====
async function loadProjects() {
    try {
        showLoader('projectsContainer');
        
        console.log('üì° Loading projects from API...');
        const response = await fetch(PROJECTS_API);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        projects = await response.json();
        console.log(`‚úÖ Loaded ${projects.length} projects`);
        renderProjects();
        
    } catch (error) {
        console.error('‚ùå Error loading projects:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        projects = await getDemoProjects();
        renderProjects();
    }
}

function renderProjects() {
    const container = document.getElementById('projectsContainer');
    if (!container) {
        console.warn('‚ö†Ô∏è projectsContainer not found');
        return;
    }
    
    if (!projects || projects.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>üìù –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç</p>
                <button class="btn btn-primary" onclick="openProjectModal()">
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                </button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = projects.map(project => `
        <div class="project-card" data-project-id="${project.id}">
            <div class="project-actions">
                <button class="btn btn-sm btn-outline" onclick="editProject(${project.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                <button class="btn btn-sm btn-outline btn-danger" onclick="deleteProject(${project.id})" title="–£–¥–∞–ª–∏—Ç—å">
                    üóëÔ∏è
                </button>
            </div>
            
            <div class="project-image">
                ${project.image ? `
                    <img src="${project.image}" alt="${project.title}" onerror="this.style.display='none'">
                ` : `
                    <div class="project-image-placeholder">
                        ${getProjectIcon(project.category)}
                    </div>
                `}
            </div>
            
            <div class="project-content">
                <h3>${escapeHtml(project.title)}</h3>
                <p class="project-description">
                    ${escapeHtml(project.description?.substring(0, 150) || '')}...
                </p>
                
                <div class="tech-tags">
                    ${(project.technologies || []).map(tech => `
                        <span class="tech-tag">${escapeHtml(tech)}</span>
                    `).join('')}
                </div>
                
                <div class="project-meta">
                    <div class="meta-item">
                        <span class="meta-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                        <span class="meta-value">${getCategoryName(project.category)}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">–ö–ª–∏–µ–Ω—Ç:</span>
                        <span class="meta-value">${project.client || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">–°—Ä–æ–∫:</span>
                        <span class="meta-value">${project.duration || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                </div>
                
                ${project.featured ? `
                    <div class="featured-badge">
                        ‚≠ê Featured
                    </div>
                ` : ''}
            </div>
        </div>
    `).join('');
}

function openProjectModal(project = null) {
    try {
        editingProject = project;
        const modal = document.getElementById('projectModal');
        const title = document.getElementById('modalTitle');
        
        if (!modal) {
            console.error('‚ùå Project modal not found');
            return;
        }
        
        if (project) {
            title.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç';
            populateProjectForm(project);
        } else {
            title.textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç';
            document.getElementById('projectForm').reset();
        }
        
        modal.classList.remove('hidden');
        console.log(`üìã ${project ? 'Edit' : 'Add'} project modal opened`);
        
    } catch (error) {
        console.error('‚ùå Error opening project modal:', error);
        showMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã', 'error');
    }
}

function populateProjectForm(project) {
    document.getElementById('projectId').value = project.id || '';
    document.getElementById('projectTitle').value = project.title || '';
    document.getElementById('projectDescription').value = project.description || '';
    document.getElementById('projectCategory').value = project.category || '';
    document.getElementById('projectClient').value = project.client || '';
    document.getElementById('projectDuration').value = project.duration || '';
    document.getElementById('projectTechnologies').value = (project.technologies || []).join(', ');
    document.getElementById('projectImage').value = project.image || '';
    document.getElementById('projectResults').value = (project.results || []).join('\n');
    document.getElementById('projectFeatured').checked = project.featured || false;
}

function closeProjectModal() {
    const modal = document.getElementById('projectModal');
    if (modal) {
        modal.classList.add('hidden');
    }
    editingProject = null;
    console.log('üìã Project modal closed');
}

function editProject(id) {
    const project = projects.find(p => p.id === id);
    if (project) {
        console.log(`‚úèÔ∏è Editing project: ${project.title}`);
        openProjectModal(project);
    } else {
        console.error(`‚ùå Project not found: ${id}`);
        showMessage('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    }
}

async function deleteProject(id) {
    const project = projects.find(p => p.id === id);
    if (!project) {
        showMessage('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${project.title}"?`)) {
        return;
    }
    
    try {
        console.log(`üóëÔ∏è Deleting project: ${project.title}`);
        
        const response = await fetch(`${PROJECTS_API}/${id}`, {
            method: 'DELETE',
            headers: getAuthHeaders()
        });
        
        if (response.ok) {
            projects = projects.filter(p => p.id !== id);
            renderProjects();
            showMessage('‚úÖ –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω', 'success');
            console.log(`‚úÖ Project deleted: ${project.title}`);
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('‚ùå Error deleting project:', error);
        showMessage(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    }
}

async function handleProjectSubmit(e) {
    e.preventDefault();
    
    const formData = getProjectFormData();
    if (!validateProjectForm(formData)) {
        return;
    }
    
    try {
        console.log(`üíæ ${editingProject ? 'Updating' : 'Creating'} project...`);
        
        const response = await saveProject(formData);
        
        if (response.ok) {
            const result = await response.json();
            closeProjectModal();
            await loadProjects(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            showMessage(result.message || (editingProject ? '‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω' : '‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω'), 'success');
            console.log(`‚úÖ Project ${editingProject ? 'updated' : 'created'} successfully`);
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('‚ùå Error saving project:', error);
        showMessage(error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    }
}

function getProjectFormData() {
    return {
        title: document.getElementById('projectTitle').value.trim(),
        description: document.getElementById('projectDescription').value.trim(),
        category: document.getElementById('projectCategory').value,
        client: document.getElementById('projectClient').value.trim(),
        duration: document.getElementById('projectDuration').value.trim(),
        technologies: document.getElementById('projectTechnologies').value.split(',').map(t => t.trim()).filter(t => t),
        image: document.getElementById('projectImage').value.trim(),
        results: document.getElementById('projectResults').value.split('\n').filter(r => r.trim()),
        featured: document.getElementById('projectFeatured').checked
    };
}

function validateProjectForm(formData) {
    if (!formData.title) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', 'error');
        return false;
    }
    if (!formData.description) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', 'error');
        return false;
    }
    if (!formData.category) {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞', 'error');
        return false;
    }
    return true;
}

async function saveProject(formData) {
    const url = editingProject ? `${PROJECTS_API}/${editingProject.id}` : PROJECTS_API;
    const method = editingProject ? 'PUT' : 'POST';
    
    return await fetch(url, {
        method: method,
        headers: getAuthHeaders(),
        body: JSON.stringify(formData)
    });
}

// ===== –ó–ê–Ø–í–ö–ò =====
async function loadLeads() {
    try {
        showLoader('leadsContainer');
        
        console.log('üì° Loading leads...');
        const response = await fetch(`${API_BASE}/leads`, {
            headers: getAuthHeaders()
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        leads = await response.json();
        console.log(`‚úÖ Loaded ${leads.length} leads`);
        renderLeads();
        
    } catch (error) {
        console.error('‚ùå Error loading leads:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫', 'error');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        leads = await getDemoLeads();
        renderLeads();
    }
}

function renderLeads() {
    const container = document.getElementById('leadsContainer');
    if (!container) return;
    
    if (!leads || leads.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>üì® –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = leads.map(lead => `
        <div class="lead-card status-${lead.status}">
            <div class="lead-header">
                <div class="lead-info">
                    <h4>${escapeHtml(lead.name)}</h4>
                    <div class="lead-meta">
                        <span>üìß ${escapeHtml(lead.email)}</span>
                        <span>üìû ${lead.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        <span>üïí ${formatDate(lead.date)}</span>
                    </div>
                </div>
                <span class="status-badge status-${lead.status}">
                    ${getStatusText(lead.status)}
                </span>
            </div>
            
            <div class="lead-content">
                <p><strong>üìã –£—Å–ª—É–≥–∞:</strong> ${getServiceName(lead.service)}</p>
                <p><strong>üè¢ –ö–æ–º–ø–∞–Ω–∏—è:</strong> ${lead.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                ${lead.message ? `
                    <div class="lead-message">
                        <strong>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</strong>
                        <p>${escapeHtml(lead.message)}</p>
                    </div>
                ` : ''}
            </div>
            
            <div class="lead-actions">
                <select onchange="updateLeadStatus(${lead.id}, this.value)" class="status-select">
                    <option value="new" ${lead.status === 'new' ? 'selected' : ''}>üÜï –ù–æ–≤–∞—è</option>
                    <option value="processed" ${lead.status === 'processed' ? 'selected' : ''}>üîÑ –í —Ä–∞–±–æ—Ç–µ</option>
                    <option value="completed" ${lead.status === 'completed' ? 'selected' : ''}>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
                </select>
                
                <div class="action-buttons">
                    <button class="btn btn-sm btn-outline" onclick="viewLead(${lead.id})" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                        üëÅÔ∏è
                    </button>
                    <button class="btn btn-sm btn-outline" onclick="contactLead(${lead.id})" title="–°–≤—è–∑–∞—Ç—å—Å—è">
                        üìû
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

async function updateLeadStatus(leadId, status) {
    try {
        console.log(`üîÑ Updating lead ${leadId} status to: ${status}`);
        
        const response = await fetch(`${API_BASE}/leads/${leadId}`, {
            method: 'PUT',
            headers: getAuthHeaders(),
            body: JSON.stringify({ status })
        });
        
        if (response.ok) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const lead = leads.find(l => l.id == leadId);
            if (lead) {
                lead.status = status;
            }
            showMessage('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    } catch (error) {
        console.error('‚ùå Error updating lead status:', error);
        showMessage(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

function viewLead(leadId) {
    const lead = leads.find(l => l.id == leadId);
    if (lead) {
        alert(`
–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:

üë§ –ò–º—è: ${lead.name}
üìß Email: ${lead.email}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${lead.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${lead.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìã –£—Å–ª—É–≥–∞: ${getServiceName(lead.service)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${lead.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}
üïí –î–∞—Ç–∞: ${formatDate(lead.date)}
üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(lead.status)}
        `);
    }
}

function contactLead(leadId) {
    const lead = leads.find(l => l.id == leadId);
    if (lead) {
        if (lead.phone) {
            window.open(`tel:${lead.phone}`, '_self');
        } else if (lead.email) {
            window.open(`mailto:${lead.email}`, '_self');
        } else {
            showMessage('–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤—è–∑–∏', 'warning');
        }
    }
}

// ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
async function loadStats() {
    try {
        showLoader('statsContainer');
        
        console.log('üì° Loading stats...');
        const response = await fetch(`${API_BASE}/stats`, {
            headers: getAuthHeaders()
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const stats = await response.json();
        console.log('‚úÖ Stats loaded');
        renderStats(stats);
        
    } catch (error) {
        console.error('‚ùå Error loading stats:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        const stats = await getDemoStats();
        renderStats(stats);
    }
}

function renderStats(stats) {
    const container = document.getElementById('statsContainer');
    if (!container) return;
    
    container.innerHTML = `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">üìä</div>
                <div class="stat-number">${stats.totalLeads || 0}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üÜï</div>
                <div class="stat-number">${stats.newLeads || 0}</div>
                <div class="stat-label">–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üöÄ</div>
                <div class="stat-number">${stats.totalProjects || 0}</div>
                <div class="stat-label">–ü—Ä–æ–µ–∫—Ç–æ–≤</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">‚≠ê</div>
                <div class="stat-number">${stats.featuredProjects || 0}</div>
                <div class="stat-label">Featured –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üìà</div>
                <div class="stat-number">${stats.conversionRate || '0%'}</div>
                <div class="stat-label">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">‚è±Ô∏è</div>
                <div class="stat-number">${stats.avgResponseTime || '0—á'}</div>
                <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
            </div>
        </div>
    `;
}

// ===== –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò =====
class PresentationsManager {
    constructor() {
        this.presentations = [];
        this.categories = [];
        console.log('üé¨ PresentationsManager initialized');
        this.init();
    }

    async init() {
        try {
            await this.loadCategories();
            await this.loadPresentations();
            this.bindEvents();
            this.renderPresentationsList();
        } catch (error) {
            console.error('‚ùå Error initializing PresentationsManager:', error);
        }
    }

    async loadPresentations() {
        try {
            console.log('üì° Loading presentations...');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
            this.presentations = await this.getDemoPresentations();
            console.log(`‚úÖ Loaded ${this.presentations.length} presentations`);
        } catch (error) {
            console.error('‚ùå Error loading presentations:', error);
            this.presentations = await this.getDemoPresentations();
        }
    }

    async loadCategories() {
        this.categories = [
            { id: 'business', name: '–ë–∏–∑–Ω–µ—Å-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏' },
            { id: 'technical', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏' },
            { id: 'marketing', name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏' }
        ];
    }

    renderPresentationsList() {
        const container = document.getElementById('presentationsList');
        if (!container) {
            console.warn('‚ö†Ô∏è presentationsList container not found');
            return;
        }

        if (this.presentations.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é</p>
                    <button class="btn btn-primary" onclick="presentationsManager.openCreateModal()">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
                    </button>
                </div>
            `;
            return;
        }

        container.innerHTML = this.presentations.map(presentation => `
            <div class="presentation-item">
                <div class="presentation-info">
                    <h4>${this.escapeHtml(presentation.title)}</h4>
                    <p>${this.escapeHtml(presentation.description)}</p>
                    <div class="presentation-meta">
                        <span class="category">${this.escapeHtml(presentation.category)}</span>
                        <span class="duration">‚è±Ô∏è ${this.escapeHtml(presentation.duration)}</span>
                        <span class="demo-requests">üë• ${presentation.demoRequests || 0} –∑–∞–ø—Ä–æ—Å–æ–≤</span>
                    </div>
                </div>
                <div class="presentation-actions">
                    <button class="btn btn-sm btn-outline" onclick="presentationsManager.editPresentation('${presentation.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-sm btn-outline btn-danger" onclick="presentationsManager.deletePresentation('${presentation.id}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    openCreateModal() {
        console.log('‚ûï Opening create presentation modal');
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        alert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    editPresentation(id) {
        console.log(`‚úèÔ∏è Editing presentation: ${id}`);
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }

    async deletePresentation(id) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é?')) return;

        try {
            console.log(`üóëÔ∏è Deleting presentation: ${id}`);
            this.presentations = this.presentations.filter(p => p.id !== id);
            this.renderPresentationsList();
            showMessage('‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!', 'success');
        } catch (error) {
            console.error('‚ùå Error deleting presentation:', error);
            showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', 'error');
        }
    }

    bindEvents() {
        console.log('üéØ Binding presentation events...');
        const btnAddPresentation = document.getElementById('btnAddPresentation');
        if (btnAddPresentation) {
            btnAddPresentation.addEventListener('click', () => this.openCreateModal());
        }
    }

    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    async getDemoPresentations() {
        return [
            {
                id: '1',
                title: '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ä–∏—Ç–µ–π–ª–∞',
                description: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏',
                category: '–ë–∏–∑–Ω–µ—Å-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
                duration: '45 –º–∏–Ω',
                demoRequests: 12
            },
            {
                id: '2',
                title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AI-—Å–∏—Å—Ç–µ–º',
                description: '–û–±–∑–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                category: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
                duration: '60 –º–∏–Ω',
                demoRequests: 8
            }
        ];
    }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function getStatusText(status) {
    const statusMap = {
        'new': 'üÜï –ù–æ–≤–∞—è',
        'processed': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

function getCategoryName(category) {
    const categoryMap = {
        'ai': 'ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        'analytics': 'üìä –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'automation': '‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
        'security': 'üõ°Ô∏è –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        'consulting': 'üíº –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
        'development': 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
    };
    return categoryMap[category] || category;
}

function getServiceName(service) {
    const serviceMap = {
        'development': 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        'consulting': 'üíº –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
        'analytics': 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'support': 'üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        'ai': 'ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
    };
    return serviceMap[service] || service || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞';
}

function getProjectIcon(category) {
    const icons = {
        'ai': 'ü§ñ',
        'analytics': 'üìä',
        'automation': '‚öôÔ∏è',
        'security': 'üõ°Ô∏è',
        'consulting': 'üíº',
        'development': 'üíª',
        'default': 'üöÄ'
    };
    return icons[category] || icons.default;
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    try {
        return new Date(dateString).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch {
        return dateString;
    }
}

function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showMessage(message, type = 'success') {
    if (window.auth && window.auth.showMessage) {
        window.auth.showMessage(message, type);
    } else {
        // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <span class="notification-icon">${type === 'error' ? '‚ùå' : '‚úÖ'}</span>
            <span class="notification-text">${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
}

function showLoader(containerId) {
    const container = document.getElementById(containerId);
    if (container) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="loader"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
        `;
    }
}

// ===== –î–ï–ú–û –î–ê–ù–ù–´–ï =====
async function getDemoProjects() {
    return [
        {
            id: 1,
            title: "–°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–∏—Ç–µ–π–ª–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.",
            category: "analytics",
            client: "–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å '–ü—Ä–æ–≥—Ä–µ—Å—Å'",
            duration: "6 –º–µ—Å—è—Ü–µ–≤",
            technologies: ["Python", "React", "PostgreSQL", "D3.js"],
            image: "/assets/images/project1.jpg",
            results: ["–£–≤–µ–ª–∏—á–∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 40%", "–°–æ–∫—Ä–∞—Ç–∏–ª–∏ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ 25%"],
            featured: true
        },
        {
            id: 2,
            title: "AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            description: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–∏–±–µ—Ä–∞—Ç–∞–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
            category: "ai",
            client: "–ë–∞–Ω–∫ '–°—Ç–∞–Ω–¥–∞—Ä—Ç'",
            duration: "8 –º–µ—Å—è—Ü–µ–≤",
            technologies: ["Python", "TensorFlow", "Kafka", "React"],
            featured: true
        }
    ];
}

async function getDemoLeads() {
    return [
        {
            id: 1,
            name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            company: "–û–û–û '–¢–µ—Ö–Ω–æ–ü—Ä–æ'",
            email: "ivan@techpro.ru",
            phone: "+7 (999) 123-45-67",
            service: "development",
            message: "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CRM-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.",
            status: "new",
            date: new Date().toISOString()
        },
        {
            id: 2,
            name: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
            company: "–ê–û '–ü—Ä–æ–º–ò–Ω–≤–µ—Å—Ç'",
            email: "sidorova@prominvest.ru",
            phone: "+7 (495) 765-43-21",
            service: "consulting",
            message: "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
            status: "processed",
            date: new Date(Date.now() - 86400000).toISOString()
        }
    ];
}

async function getDemoStats() {
    return {
        totalLeads: 15,
        newLeads: 3,
        totalProjects: 8,
        featuredProjects: 2,
        conversionRate: '24%',
        avgResponseTime: '2—á 15–º'
    };
}

// ===== –≠–ö–°–ü–û–†–¢ =====
async function exportLeads() {
    try {
        console.log('üì§ Exporting leads...');
        
        const response = await fetch(`${API_BASE}/leads/export`, {
            headers: getAuthHeaders()
        });
        
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `leads_${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            showMessage('‚úÖ –ó–∞—è–≤–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }
    } catch (error) {
        console.error('‚ùå Error exporting leads:', error);
        showMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫', 'error');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.openProjectModal = openProjectModal;
window.closeProjectModal = closeProjectModal;
window.editProject = editProject;
window.deleteProject = deleteProject;
window.updateLeadStatus = updateLeadStatus;
window.exportLeads = exportLeads;
window.showSection = showSection;
window.viewLead = viewLead;
window.contactLead = contactLead;

console.log('‚úÖ Admin module loaded successfully');