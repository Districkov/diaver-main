// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE = '/api/admin';
const PROJECTS_API = '/api/projects';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let projects = [];
let leads = [];
let editingProject = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ auth.js –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞)
window.initializeAdmin = function() {
    console.log('Initializing admin panel...');
    setupAdminEventListeners();
    loadInitialData();
    showSection('projects');
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function setupAdminEventListeners() {
    console.log('Setting up admin event listeners...');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const section = e.target.dataset.section;
            showSection(section);
        });
    });
    
    // –§–æ—Ä–º–∞ –ø—Ä–æ–µ–∫—Ç–∞
    const projectForm = document.getElementById('projectForm');
    if (projectForm) {
        projectForm.addEventListener('submit', handleProjectSubmit);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const projectModal = document.getElementById('projectModal');
    if (projectModal) {
        projectModal.addEventListener('click', (e) => {
            if (e.target === projectModal) {
                closeProjectModal();
            }
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    const closeBtn = document.querySelector('.close-btn');
    if (closeBtn) {
        closeBtn.addEventListener('click', closeProjectModal);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadInitialData() {
    console.log('Loading initial data...');
    loadProjects();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
function showSection(sectionName) {
    console.log('Showing section:', sectionName);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-section="${sectionName}"]`).classList.add('active');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
    document.querySelectorAll('.admin-section').forEach(section => {
        section.classList.add('hidden');
    });
    
    const targetSection = document.getElementById(`${sectionName}Section`);
    if (targetSection) {
        targetSection.classList.remove('hidden');
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (sectionName === 'projects' && projects.length === 0) {
        loadProjects();
    } else if (sectionName === 'leads' && leads.length === 0) {
        loadLeads();
    } else if (sectionName === 'stats') {
        loadStats();
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
function getAuthHeaders() {
    if (window.auth && window.auth.getAuthHeaders) {
        return window.auth.getAuthHeaders();
    }
    throw new Error('Auth module not available');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
async function loadProjects() {
    try {
        showLoader('projectsContainer');
        
        const response = await fetch(PROJECTS_API);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        projects = await response.json();
        renderProjects();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
        // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        projects = await getMockProjects();
        renderProjects();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
function renderProjects() {
    const container = document.getElementById('projectsContainer');
    if (!container) return;
    
    if (!projects || projects.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>–ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = projects.map(project => `
        <div class="project-card">
            <div class="project-actions">
                <button class="btn btn-sm btn-outline" onclick="editProject(${project.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                <button class="btn btn-sm btn-outline" onclick="deleteProject(${project.id})" title="–£–¥–∞–ª–∏—Ç—å">
                    üóëÔ∏è
                </button>
            </div>
            <h3>${escapeHtml(project.title)}</h3>
            <p>${escapeHtml(project.description?.substring(0, 100) || '')}...</p>
            <div class="tech-tags">
                ${(project.technologies || []).map(tech => `
                    <span class="tech-tag">${escapeHtml(tech)}</span>
                `).join('')}
            </div>
            <div class="project-meta">
                <small>${getCategoryName(project.category)}</small>
                <small>${project.client || '–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}</small>
                ${project.featured ? '<span class="tech-tag" style="background:#dc2626;color:white;">Featured</span>' : ''}
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫
async function loadLeads() {
    try {
        showLoader('leadsContainer');
        
        const response = await fetch(`${API_BASE}/leads`, {
            headers: getAuthHeaders()
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        leads = await response.json();
        renderLeads();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫', 'error');
        // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        leads = await getMockLeads();
        renderLeads();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function renderLeads() {
    const container = document.getElementById('leadsContainer');
    if (!container) return;
    
    if (!leads || leads.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = leads.map(lead => `
        <div class="lead-card">
            <div class="lead-info">
                <h4>${escapeHtml(lead.name)}</h4>
                <div class="lead-meta">
                    <span>üìß ${escapeHtml(lead.email)}</span>
                    <span>üìû ${lead.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    <span>üïí ${new Date(lead.date).toLocaleDateString('ru-RU')}</span>
                </div>
                <p><strong>–£—Å–ª—É–≥–∞:</strong> ${getServiceName(lead.service)}</p>
                <p>${escapeHtml(lead.message || '')}</p>
            </div>
            <span class="status-badge status-${lead.status}">${getStatusText(lead.status)}</span>
            <select onchange="updateLeadStatus(${lead.id}, this.value)" class="btn btn-sm">
                <option value="new" ${lead.status === 'new' ? 'selected' : ''}>–ù–æ–≤–∞—è</option>
                <option value="processed" ${lead.status === 'processed' ? 'selected' : ''}>–í —Ä–∞–±–æ—Ç–µ</option>
                <option value="completed" ${lead.status === 'completed' ? 'selected' : ''}>–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
            </select>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        showLoader('statsContainer');
        
        const response = await fetch(`${API_BASE}/stats`, {
            headers: getAuthHeaders()
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        const stats = await response.json();
        renderStats(stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
        // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const stats = await getMockStats();
        renderStats(stats);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function renderStats(stats) {
    const container = document.getElementById('statsContainer');
    if (!container) return;
    
    container.innerHTML = `
        <div class="stat-card">
            <div class="stat-number">${stats.totalLeads || 0}</div>
            <div class="stat-label">–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${stats.newLeads || 0}</div>
            <div class="stat-label">–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${stats.totalProjects || 0}</div>
            <div class="stat-label">–ü—Ä–æ–µ–∫—Ç–æ–≤</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${stats.featuredProjects || 0}</div>
            <div class="stat-label">Featured –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
        </div>
    `;
}

// –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
function openProjectModal(project = null) {
    try {
        editingProject = project;
        const modal = document.getElementById('projectModal');
        const title = document.getElementById('modalTitle');
        
        if (project) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç';
            document.getElementById('projectId').value = project.id;
            document.getElementById('projectTitle').value = project.title || '';
            document.getElementById('projectDescription').value = project.description || '';
            document.getElementById('projectCategory').value = project.category || '';
            document.getElementById('projectClient').value = project.client || '';
            document.getElementById('projectDuration').value = project.duration || '';
            document.getElementById('projectTechnologies').value = (project.technologies || []).join(', ');
            document.getElementById('projectImage').value = project.image || '';
            document.getElementById('projectResults').value = (project.results || []).join('\n');
            document.getElementById('projectFeatured').checked = project.featured || false;
        } else {
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç';
            document.getElementById('projectForm').reset();
        }
        
        modal.classList.remove('hidden');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã', 'error');
    }
}

function closeProjectModal() {
    const modal = document.getElementById('projectModal');
    if (modal) {
        modal.classList.add('hidden');
    }
    editingProject = null;
}

function editProject(id) {
    const project = projects.find(p => p.id === id);
    if (project) openProjectModal(project);
}

async function deleteProject(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) return;
    
    try {
        const response = await fetch(`${PROJECTS_API}/${id}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            projects = projects.filter(p => p.id !== id);
            renderProjects();
            showMessage('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω', 'success');
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showMessage(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–∞
async function handleProjectSubmit(e) {
    e.preventDefault();
    
    const formData = {
        title: document.getElementById('projectTitle').value,
        description: document.getElementById('projectDescription').value,
        category: document.getElementById('projectCategory').value,
        client: document.getElementById('projectClient').value,
        duration: document.getElementById('projectDuration').value,
        technologies: document.getElementById('projectTechnologies').value.split(',').map(t => t.trim()).filter(t => t),
        image: document.getElementById('projectImage').value,
        results: document.getElementById('projectResults').value.split('\n').filter(r => r.trim()),
        featured: document.getElementById('projectFeatured').checked
    };

    try {
        let response;
        
        if (editingProject) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            response = await fetch(`${PROJECTS_API}/${editingProject.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            response = await fetch(PROJECTS_API, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });
        }
        
        if (response.ok) {
            const result = await response.json();
            closeProjectModal();
            loadProjects(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            showMessage(result.message || (editingProject ? '–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω'), 'success');
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showMessage(error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error');
    }
}

// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫
async function updateLeadStatus(leadId, status) {
    try {
        const response = await fetch(`${API_BASE}/leads/${leadId}`, {
            method: 'PUT',
            headers: getAuthHeaders(),
            body: JSON.stringify({ status })
        });
        
        if (response.ok) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const lead = leads.find(l => l.id == leadId);
            if (lead) {
                lead.status = status;
            }
            showMessage('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        } else {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        showMessage(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫
async function exportLeads() {
    try {
        const response = await fetch(`${API_BASE}/leads/export`, {
            headers: getAuthHeaders()
        });
        
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `leads_${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            showMessage('–ó–∞—è–≤–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫', 'error');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statusMap = {
        'new': '–ù–æ–≤–∞—è',
        'processed': '–í —Ä–∞–±–æ—Ç–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

function getCategoryName(category) {
    const categoryMap = {
        'ai': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        'analytics': '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'automation': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
        'security': '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        'consulting': '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥'
    };
    return categoryMap[category] || category;
}

function getServiceName(service) {
    const serviceMap = {
        'development': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        'consulting': '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
        'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
    };
    return serviceMap[service] || service || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞';
}

function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showMessage(message, type = 'success') {
    if (window.auth && window.auth.showMessage) {
        window.auth.showMessage(message, type);
    } else {
        // Fallback –µ—Å–ª–∏ auth.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        alert(`${type === 'error' ? '‚ùå' : '‚úÖ'} ${message}`);
    }
}

function showLoader(containerId) {
    const container = document.getElementById(containerId);
    if (container) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="loader"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
        `;
    }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API)
async function getMockProjects() {
    return [
        {
            id: 1,
            title: "–°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–∏—Ç–µ–π–ª–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.",
            category: "analytics",
            client: "–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Ç—å '–ü—Ä–æ–≥—Ä–µ—Å—Å'",
            duration: "6 –º–µ—Å—è—Ü–µ–≤",
            technologies: ["Python", "React", "PostgreSQL", "D3.js"],
            image: "/assets/images/project1.jpg",
            results: ["–£–≤–µ–ª–∏—á–∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 40%", "–°–æ–∫—Ä–∞—Ç–∏–ª–∏ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ 25%"],
            featured: true
        }
    ];
}

async function getMockLeads() {
    return [
        {
            id: 1,
            name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            company: "–û–û–û '–¢–µ—Ö–Ω–æ–ü—Ä–æ'",
            email: "ivan@techpro.ru",
            phone: "+7 (999) 123-45-67",
            service: "development",
            message: "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CRM-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.",
            status: "new",
            date: "2024-01-15T10:30:00Z"
        }
    ];
}

async function getMockStats() {
    return {
        totalLeads: 15,
        newLeads: 3,
        totalProjects: 8,
        featuredProjects: 2
    };
}
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏
class PresentationsManager {
    constructor() {
        this.presentations = [];
        this.categories = [];
        this.init();
    }

    async init() {
        await this.loadPresentations();
        await this.loadCategories();
        this.renderPresentationsList();
        this.bindEvents();
    }

    async loadPresentations() {
        try {
            const response = await fetch('/api/presentations');
            this.presentations = await response.json();
        } catch (error) {
            console.error('Error loading presentations:', error);
        }
    }

    async loadCategories() {
        try {
            const response = await fetch('/api/presentations/categories');
            this.categories = await response.json();
        } catch (error) {
            console.error('Error loading categories:', error);
        }
    }

    renderPresentationsList() {
        const container = document.getElementById('presentationsList');
        if (!container) return;

        container.innerHTML = this.presentations.map(presentation => `
            <div class="presentation-item" data-id="${presentation.id}">
                <div class="presentation-info">
                    <h4>${presentation.title}</h4>
                    <p>${presentation.description}</p>
                    <div class="presentation-meta">
                        <span class="category">${presentation.category}</span>
                        <span class="duration">${presentation.duration}</span>
                        <span class="demo-requests">${presentation.demoRequests} –∑–∞–ø—Ä–æ—Å–æ–≤</span>
                    </div>
                </div>
                <div class="presentation-actions">
                    <button class="btn-edit" onclick="presentationsManager.editPresentation('${presentation.id}')">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn-delete" onclick="presentationsManager.deletePresentation('${presentation.id}')">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    async createPresentation(formData) {
        try {
            const response = await fetch('/api/presentations', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            
            if (result.success) {
                await this.loadPresentations();
                this.renderPresentationsList();
                this.closeModal();
                alert('–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.error);
            }
        } catch (error) {
            console.error('Error creating presentation:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏');
        }
    }

    async editPresentation(id) {
        const presentation = this.presentations.find(p => p.id === id);
        if (!presentation) return;

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.openEditModal(presentation);
    }

    async updatePresentation(id, formData) {
        try {
            const response = await fetch(`/api/presentations/${id}`, {
                method: 'PUT',
                body: formData
            });

            const result = await response.json();
            
            if (result.success) {
                await this.loadPresentations();
                this.renderPresentationsList();
                this.closeModal();
                alert('–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.error);
            }
        } catch (error) {
            console.error('Error updating presentation:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏');
        }
    }

    async deletePresentation(id) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é?')) return;

        try {
            const response = await fetch(`/api/presentations/${id}`, {
                method: 'DELETE'
            });

            const result = await response.json();
            
            if (result.success) {
                await this.loadPresentations();
                this.renderPresentationsList();
                alert('–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!');
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.error);
            }
        } catch (error) {
            console.error('Error deleting presentation:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏');
        }
    }

    openCreateModal() {
        // –ö–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        const modal = document.getElementById('presentationModal');
        modal.style.display = 'block';
        
        const form = document.getElementById('presentationForm');
        form.reset();
        form.onsubmit = (e) => {
            e.preventDefault();
            this.handleFormSubmit();
        };
    }

    openEditModal(presentation) {
        // –ö–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const modal = document.getElementById('presentationModal');
        modal.style.display = 'block';
        
        const form = document.getElementById('presentationForm');
        form.reset();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
        document.getElementById('presentationTitle').value = presentation.title;
        document.getElementById('presentationDescription').value = presentation.description;
        document.getElementById('presentationCategory').value = presentation.category;
        document.getElementById('presentationDuration').value = presentation.duration;
        document.getElementById('presentationFeatured').checked = presentation.featured;

        form.onsubmit = (e) => {
            e.preventDefault();
            this.handleFormSubmit(presentation.id);
        };
    }

    closeModal() {
        const modal = document.getElementById('presentationModal');
        modal.style.display = 'none';
    }

    async handleFormSubmit(editId = null) {
        const form = document.getElementById('presentationForm');
        const formData = new FormData(form);

        if (editId) {
            await this.updatePresentation(editId, formData);
        } else {
            await this.createPresentation(formData);
        }
    }

    bindEvents() {
        // –ë–∏–Ω–¥–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏
        const btnAddPresentation = document.getElementById('btnAddPresentation');
        if (btnAddPresentation) {
            btnAddPresentation.addEventListener('click', () => this.openCreateModal());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modal = document.getElementById('presentationModal');
        const span = modal.querySelector('.close');
        if (span) {
            span.addEventListener('click', () => this.closeModal());
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
let presentationsManager;

document.addEventListener('DOMContentLoaded', () => {
    presentationsManager = new PresentationsManager();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
window.openProjectModal = openProjectModal;
window.closeProjectModal = closeProjectModal;
window.editProject = editProject;
window.deleteProject = deleteProject;
window.updateLeadStatus = updateLeadStatus;
window.exportLeads = exportLeads;
window.showSection = showSection;

console.log('Admin module loaded');